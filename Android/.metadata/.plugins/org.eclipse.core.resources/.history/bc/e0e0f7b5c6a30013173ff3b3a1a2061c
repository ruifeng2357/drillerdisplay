/*
 * Copyright (C) 2009 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.vectormagnetics.android.drillerdisplay;

import android.app.Fragment; //01/14
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.SharedPreferences; //02/14
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.preference.PreferenceManager; //02/14
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramPacket; //02/14
import java.net.DatagramSocket; //02/14
import java.net.InetAddress; //02/14
import java.util.Date; //02/14
import java.util.UUID;

/**
 * This class does all the work for setting up and managing Bluetooth
 * connections with other devices. It has a thread that listens for
 * incoming connections, a thread for connecting with a device, and a
 * thread for performing data transmissions when connected.
 */
public class RivCrossDDService extends Fragment { //01/14 subclass Fragment
    // Debugging
    private static final String TAG = "RivCrossDDService";
    private static final boolean D = true;

    // Name for the SDP record when creating server socket
    private static final String NAME_SECURE = "RivCrossDDSecure"; //only allow secure BT connections

    // Unique UUID for this application
    private static final UUID MY_UUID_SECURE =
        UUID.fromString("fa87c0d0-afac-11de-8a37-0800200c9a66");

    // Member fields
    private final BluetoothAdapter mAdapter;
    private volatile Handler mHandler; //01/14 make not final so that it can be set to the new message handler on every config change (and make volatile to prevent thread caching, just in case)
    //02/14 remove all traces of the insecure accept thread and the connect thread
    private AcceptThread mSecureAcceptThread;
    private ConnectedThread mConnectedThread;
    private WIFIclientThread mWifiThread; //02/14 used in place of the accept thread and connected thread, if in Wifi mode
    private int mState;
    private boolean mIsBT; //02/14 keeps track of whether the current/pending connection is BT or Wifi

    // Constants that indicate the current connection state
    public static final int STATE_NONE = 0;       // we're doing nothing
    public static final int STATE_LISTEN = 1;     // now listening for incoming connections
    public static final int STATE_CONNECTING = 2; // attempting to create a new Wifi connection (not used for BT)
    public static final int STATE_CONNECTED = 3;  // now connected to a remote device
    
    //02/14 added Wifi-related constants
    public static final String ALL_IP_ADDRS = "255.255.255.255";
    public static final String ERR_BAD_IP = "EADDRNOTAVAIL";
    public static final String ERR_BAD_PORT = "EACCES";

    /**
     * Constructor. Prepares a new connection.
     * @param context  The UI Activity Context
     * @param handler  A Handler to send messages back to the UI Activity
     * @param isBT	   True if the new connection should be BT, false if it should be Wifi
     */
    public RivCrossDDService(Context context, Handler handler, boolean isBT) {
        mAdapter = BluetoothAdapter.getDefaultAdapter();
        mState = STATE_NONE;
        mHandler = handler;
        mIsBT = isBT;
        
        //01/14 Tell the framework to try to keep this fragment around during a configuration change.
        setRetainInstance(true);
    }
    
    //01/14 allows the handler to be set to a new one created on config change
    public void setHandler(Handler handler) {
    	mHandler = handler;
    }
    
    //02/14 lets the main activity determine the connection mode
    public boolean getIsBT() {
    	return mIsBT;
    }
    
    //02/14 lets the main activity get the local IP and port #
    public String getLocalIP() {
    	if(mWifiThread == null) return "";
    	else return mWifiThread.serverIP;
    }
    public int getLocalPort() {
    	if(mWifiThread == null) return -1;
    	else return mWifiThread.serverPort;
    }
    
    /**
     * Set the current state of the chat connection
     * @param state  An integer defining the current connection state
     */
    private synchronized void setState(int state) {
        if (D) Log.d(TAG, "setState() " + mState + " -> " + state);
        mState = state;

        // Give the new state to the Handler so the UI Activity can update
        mHandler.obtainMessage(MainActivity.MESSAGE_STATE_CHANGE, state, -1).sendToTarget();
    }

    /**
     * Return the current connection state. */
    public synchronized int getState() {
        return mState;
    }

    /**
     * Start the chat service. Specifically start AcceptThread to begin a
     * session in listening (server) mode. Called by the Activity onResume() */
    public synchronized void start() {
        if (D) Log.d(TAG, "start");

        // Cancel any thread currently running a connection
        if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}

        setState(STATE_LISTEN);

        // Start the thread to listen on a BluetoothServerSocket
        //02/14 attempt to set up Wifi connection instead if in Wifi mode
        if(mIsBT) {
	        if (mSecureAcceptThread == null) {
	            mSecureAcceptThread = new AcceptThread();
	            mSecureAcceptThread.start();
	        }
        } else {
        	mWifiThread = new WIFIclientThread();
        	mWifiThread.start();
        }
    }

    /**
     * Start the ConnectedThread to begin managing a Bluetooth connection
     * @param socket  The BluetoothSocket on which the connection was made
     * @param device  The BluetoothDevice that has been connected
     */
    public synchronized void connected(BluetoothSocket socket, BluetoothDevice
            device, final String socketType) {
        if (D) Log.d(TAG, "connected, Socket Type:" + socketType);

        // Cancel any thread currently running a connection
        if (mConnectedThread != null) {mConnectedThread.cancel(); mConnectedThread = null;}

        // Cancel the accept thread because we only want to connect to one device
        if (mSecureAcceptThread != null) {
            mSecureAcceptThread.cancel();
            mSecureAcceptThread = null;
        }

        // Start the thread to manage the connection and perform transmissions
        mConnectedThread = new ConnectedThread(socket, socketType);
        mConnectedThread.start();

        // Send the name of the connected device back to the UI Activity
        Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_DEVICE_NAME);
        Bundle bundle = new Bundle();
        bundle.putString(MainActivity.DEVICE_NAME, device.getName());
        bundle.putBoolean(MainActivity.IS_IP_ADDR, false); //02/14 used to indicate whether the connection status should display "listening on" or "connected to"
        msg.setData(bundle);
        mHandler.sendMessage(msg);

        setState(STATE_CONNECTED);
    }
    
    /**
     * Stop all threads
     */
    public synchronized void stop() {
        if (D) Log.d(TAG, "stop");

        if (mConnectedThread != null) {
            mConnectedThread.cancel();
            mConnectedThread = null;
        }

        if (mSecureAcceptThread != null) {
            mSecureAcceptThread.cancel();
            mSecureAcceptThread = null;
        }
        
        //02/14 cancel the wifi thread, too
        if (mWifiThread != null) {
        	mWifiThread.cancel();
        	mWifiThread = null;
        }
        
        setState(STATE_NONE);
    }

    /**
     * Write to the ConnectedThread in an unsynchronized manner
     * @param out The bytes to write
     * @see ConnectedThread#write(byte[])
     */
    public void write(byte[] out) {
        // Create temporary object
        ConnectedThread r;
        // Synchronize a copy of the ConnectedThread
        synchronized (this) {
            if (mState != STATE_CONNECTED) return;
            r = mConnectedThread;
        }
        // Perform the write unsynchronized
        r.write(out);
    }

    /**
     * Indicate that the connection was lost or failed and notify the UI Activity.
     */
    private void connectionLost() { //02/14 now used when a connection can't be established, as well as when a successful connection is lost
        // Send a failure message back to the Activity
        Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(MainActivity.TOAST, getString(mIsBT ? R.string.msg_conn_err_bt : R.string.msg_conn_err_wifi));
        msg.setData(bundle);
        mHandler.sendMessage(msg);

        // Start the service over to restart listening mode
        RivCrossDDService.this.start();
    }

    /**
     * This thread runs while listening for incoming connections. It behaves
     * like a server-side client. It runs until a connection is accepted
     * (or until cancelled).
     */
    private class AcceptThread extends Thread {
        // The local server socket
        private BluetoothServerSocket mmServerSocket;
        private String mSocketType;
        boolean keepGoing = true; //02/14 used to prevent auto-restarting the connection if it was purposely closed in order to switch to Wifi mode

        public void run() {
            if (D) Log.d(TAG, "Socket Type: " + mSocketType +
                    "BEGIN mAcceptThread" + this);
            setName("AcceptThread" + mSocketType);

            BluetoothSocket socket = null;

            // Listen to the server socket if we're not connected
            while(keepGoing && mState != STATE_CONNECTED) {
                try {
                	if(mmServerSocket == null) mmServerSocket = mAdapter.listenUsingRfcommWithServiceRecord(NAME_SECURE, MY_UUID_SECURE); //02/14 moved here so the accept thread will keep trying to do it if it fails
                	// This is a blocking call and will only return on a
                    // successful connection or an exception
                	socket = mmServerSocket.accept();
                } catch (Exception e) {
                    Log.e(TAG, "Socket Type: " + mSocketType + "accept() failed", e);
                }

                // If a connection was accepted
                if (socket != null) {
                    synchronized (RivCrossDDService.this) {
                        switch (mState) {
                        case STATE_LISTEN:
                        case STATE_CONNECTING:
                            // Situation normal. Start the connected thread.
                            connected(socket, socket.getRemoteDevice(),
                                    mSocketType);
                            break;
                        case STATE_NONE:
                        case STATE_CONNECTED:
                            // Either not ready or already connected. Terminate new socket.
                            try {
                                socket.close();
                            } catch (IOException e) {
                                Log.e(TAG, "Could not close unwanted socket", e);
                            }
                            break;
                        }
                    }
                }
            }
            if (D) Log.i(TAG, "END mAcceptThread, socket Type: " + mSocketType);

        }

        public void cancel() {
        	keepGoing = false;
            if (D) Log.d(TAG, "Socket Type" + mSocketType + "cancel " + this);
            try {
                mmServerSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "Socket Type" + mSocketType + "close() of server failed", e);
            }
        }
    }

    //02/14 moved here from MainActivity.java
    public class WIFIclientThread extends Thread implements Runnable {
    	DatagramSocket socket;
    	SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
    	//02/14 get IP and port from settings
    	private String serverIP = sp.getString(MainActivity.PREF_LOCAL_IP, "");
    	private int serverPort = Integer.parseInt(sp.getString(MainActivity.PREF_LOCAL_PORT, ""));
    	boolean keepGoing = true; //02/14 used to prevent auto-restarting the connection if it was purposely closed in order to switch to BT mode
    	
		public void run() {
			socket = null;
			try {
				byte[] packetContent;
				boolean noRCDataToastShown = false;
				boolean connectedToastShown = false;

				//02/14 display "connecting" msg
				setState(STATE_CONNECTING);
				
				InetAddress serverAddr = InetAddress.getByName(serverIP);
				Log.d("Dial", "Server: Start connecting");
				socket = new DatagramSocket(serverPort, serverAddr);
				socket.setSoTimeout(3000);
				byte[] buf = new byte[128]; // aa=123.45 => 9
				DatagramPacket packet = new DatagramPacket(buf, buf.length);

				while (keepGoing) {
					try {
						socket.receive(packet);
					} catch (Exception ex) {
						if(keepGoing && !noRCDataToastShown) {
							setState(STATE_LISTEN);
							Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
					        Bundle bundle = new Bundle();
					        bundle.putString(MainActivity.TOAST, getString(R.string.msg_no_data_wifi));
					        msg.setData(bundle);
					        mHandler.sendMessage(msg);
							noRCDataToastShown = true;
							connectedToastShown = false;
						}
						continue;
					}
					if(noRCDataToastShown) {						
						Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
				        Bundle bundle = new Bundle();
				        bundle.putString(MainActivity.TOAST, getString(R.string.msg_data_wifi));
				        msg.setData(bundle);
				        mHandler.sendMessage(msg);
						noRCDataToastShown = false;
						Thread.sleep(500); //02/14 make sure message gets seen
					}
					//02/14 display "connected" msg
					if(!connectedToastShown) {
				        Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_DEVICE_NAME);
				        Bundle bundle = new Bundle();
				        String connTo = (serverIP.compareTo(ALL_IP_ADDRS) == 0 ? getString(R.string.title_all_ip_addrs) : serverIP + ":" + serverPort);
				        bundle.putString(MainActivity.DEVICE_NAME, connTo);
				        bundle.putBoolean(MainActivity.IS_IP_ADDR, true);
				        msg.setData(bundle);
				        mHandler.sendMessage(msg);
				        mHandler.obtainMessage(MainActivity.MESSAGE_STATE_CHANGE, STATE_CONNECTED, 1).sendToTarget();
						connectedToastShown = true;
					}
					
					packetContent = new String(packet.getData(), packet.getOffset(), packet.getLength()).getBytes();
					mHandler.obtainMessage(MainActivity.MESSAGE_READ, packetContent.length, -1, packetContent).sendToTarget();
				}
			} catch (Exception e) {
				Log.e(TAG, "disconnected", e);
				if(e.getMessage().contains(ERR_BAD_IP)) {
					setState(STATE_LISTEN);
					Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
			        Bundle bundle = new Bundle();
			        bundle.putString(MainActivity.TOAST, getString(R.string.msg_bad_ip));
			        msg.setData(bundle);
			        mHandler.sendMessage(msg);
				} else if(e.getMessage().contains(ERR_BAD_PORT)) {
					setState(STATE_LISTEN);
					Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
			        Bundle bundle = new Bundle();
			        bundle.putString(MainActivity.TOAST, getString(R.string.msg_bad_port));
			        msg.setData(bundle);
			        mHandler.sendMessage(msg);
				} else if(keepGoing) connectionLost();
			}
		}
		
		public void cancel() {
			keepGoing = false;
            try {
            	if(socket != null) socket.close();
            } catch (Exception e) {
                Log.e(TAG, "Wifi Socket close() of server failed", e);
            }
		}
	}

    /**
     * This thread runs during a connection with a remote device.
     * It handles all incoming and outgoing transmissions.
     */
    private class ConnectedThread extends Thread {
        private BluetoothSocket mmSocket;
        private InputStream mmInStream;
        private OutputStream mmOutStream;
        final byte delim = 5;
        boolean keepGoing = true;

        public ConnectedThread(BluetoothSocket socket, String socketType) {
            Log.d(TAG, "create ConnectedThread: " + socketType);
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            // Get the BluetoothSocket input and output streams
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                Log.e(TAG, "temp sockets not created", e);
            }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            Log.i(TAG, "BEGIN mConnectedThread");
            byte[] packetBytes = new byte[128];
            byte[] readBuffer = new byte[128];
            int readBufferPosition = 0;
            int bytes;
            boolean noBridgeDataToastShown = false;
            long firstTimeAttempted = 0;

            // Keep listening to the InputStream while connected
            while (keepGoing) {
                try {
                    // Read from the InputStream
                	if(mmInStream.available() == 0) {
                		if(firstTimeAttempted == 0) firstTimeAttempted = (new Date()).getTime();
            			if(firstTimeAttempted < (new Date()).getTime() - 3000 && keepGoing && !noBridgeDataToastShown) {
							Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
					        Bundle bundle = new Bundle();
					        bundle.putString(MainActivity.TOAST, getString(R.string.msg_no_data_bt));
					        bundle.putBoolean(MainActivity.DISABLE_LEDS, true);
					        msg.setData(bundle);
					        mHandler.sendMessage(msg);
					        noBridgeDataToastShown = true;
            			}
            			continue;
                	}
                	firstTimeAttempted = 0;
                	if(noBridgeDataToastShown) {						
						Message msg = mHandler.obtainMessage(MainActivity.MESSAGE_TOAST);
				        Bundle bundle = new Bundle();
				        bundle.putString(MainActivity.TOAST, getString(R.string.msg_data_bt));
				        bundle.putBoolean(MainActivity.ENABLE_LEDS, true);
				        msg.setData(bundle);
				        mHandler.sendMessage(msg);
				        noBridgeDataToastShown = false;
					}
                    bytes = mmInStream.read(packetBytes);

                    for(int i=0;i<bytes;i++) {
                        if(packetBytes[i] == delim) {
                        	byte[] completedMsg = new byte[readBufferPosition];
                            System.arraycopy(readBuffer, 0, completedMsg, 0, completedMsg.length);
                            // Send the obtained bytes to the UI Activity
                            mHandler.obtainMessage(MainActivity.MESSAGE_READ, readBufferPosition, -1, completedMsg).sendToTarget();
                            readBufferPosition = 0;
                        } else {
                        	readBuffer[readBufferPosition++] = packetBytes[i];
                        }
                    } 
                } catch (IOException e) {
                    Log.e(TAG, "disconnected", e);
                    if(keepGoing) connectionLost();
                    break;
                }
            }
        }

        /**
         * Write to the connected OutStream.
         * @param buffer  The bytes to write
         */
        public void write(byte[] buffer) {
            try {
                mmOutStream.write(buffer);

                // Share the sent message back to the UI Activity
                mHandler.obtainMessage(MainActivity.MESSAGE_WRITE, -1, -1, buffer)
                        .sendToTarget();
            } catch (IOException e) {
                Log.e(TAG, "Exception during write", e);
            }
        }

        public void cancel() {
        	keepGoing = false;
        	if(mmInStream != null) {
        		try {mmInStream.close();} catch (Exception e) {}
        		mmInStream = null;
        	}
        	if(mmOutStream != null) {
        		try {mmOutStream.close();} catch (Exception e) {}
        		mmOutStream = null;
        	}
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of connect socket failed", e);
            }
            mmSocket = null;
        }
    }
}
